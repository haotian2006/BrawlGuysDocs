@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AABB {
  + AABB(Vector2, Vector2): 
  + sweptAABB(AABB, float, int[]): float
  + resize(Vector2): void
  + containsPoint(Vector2): boolean
  + copy(): AABB
  + translate(Vector2): void
  + overlaps(AABB): boolean
   broadphase: AABB
   center: Vector2
}
class AbstractComponent {
  + AbstractComponent(Entity, boolean, boolean): 
  + equals(Object): boolean
  + update(double): void
  + draw(Graphics2D, Vector2, Vector2): void
  + hashCode(): int
}
class ApplyRotation {
  + ApplyRotation(Entity): 
  + draw(Graphics2D, Vector2, Vector2): void
}
class Back {
  + Back(): 
  + easeIn(float, float, float, float): float
  + easeIn(float, float, float, float, float): float
  + easeOut(float, float, float, float): float
  + easeOut(float, float, float, float, float): float
  + easeInOut(float, float, float): float
  + easeInOut(float, float, float, float, float): float
  + easeIn(float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float): float
}
interface BaseFrame << interface >> {
  + setCenter(int, int): void
  + GetPositionRelativeToPoint(Point): Point
   center: Point
   component: JComponent
}
class Bounce {
  + Bounce(): 
  + easeOut(float, float, float, float): float
  + easeIn(float, float, float, float): float
  + easeInOut(float, float, float, float): float
}
class Brawler {
  + Brawler(Engine): 
  - controller: Controller
  + update(double): void
  + fire(): void
   controller: Controller
}
class Camera {
  + Camera(Engine): 
  + Position: Vector2
   relativeMouseLoc: Vector2
   entity: Entity
   Position: Vector2
}
enum CameraMode << enumeration >> {
  + CameraMode(): 
  + valueOf(String): CameraMode
  + values(): CameraMode[]
}
class Circ {
  + Circ(): 
  + easeIn(float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float): float
  + easeIn(float, float, float, float): float
  + easeOut(float, float, float, float): float
  + easeInOut(float, float, float): float
}
class Client {
  + Client(): 
}
class CollisionHandler {
  + CollisionHandler(Engine): 
  - entityVsTileLoop(Entity, AABB): Tuple2<Float, Vector2>
  + getEntityInBounds(AABB): Entity[]
  + entityVsTile(Entity, double): Vector2
}
interface Communicator << interface >> {
  + SendPacket(Packet): void
  + Start(): void
  + Stop(): void
}
class ComponentContainer {
  + ComponentContainer(): 
  + remove(AbstractComponent): boolean
  + remove(Class<AbstractComponent>): boolean
  + get(Class<AbstractComponent>): AbstractComponent
  + add(AbstractComponent): boolean
  + iterator(): Iterator<AbstractComponent>
  + add(AbstractComponent, int): AbstractComponent
  + foundType(AbstractComponent): AbstractComponent
  + clear(): void
  + remove(int): AbstractComponent
}
class ComponentMap {
  + ComponentMap(): 
  - readObject(ObjectInputStream): void
  + put(Short, byte, Serializable): void
  + clear(): void
  - writeObject(ObjectOutputStream): void
   empty: boolean
}
interface Connection << interface >> {
  + disconnect(): void
}
class ConnectionContainer {
  + ConnectionContainer(): 
  + add(Connection): void
  + disconnectAll(): void
}
class Controller {
  + Controller(Brawler): 
  + update(double): void
  + destroy(): void
}
class Cubic {
  + Cubic(): 
  + easeIn(float, float, float, float): float
  + easeInOut(float, float, float): float
  + easeOut(float, float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeIn(float, float, float): float
  + easeOut(float, float, float): float
}
enum EasingFunction << enumeration >> {
  + EasingFunction(): 
  + valueOf(String): EasingFunction
  + values(): EasingFunction[]
}
enum EasingType << enumeration >> {
  + EasingType(): 
  + values(): EasingType[]
  + valueOf(String): EasingType
}
class Elastic {
  + Elastic(): 
  + easeOut(float, float, float, float, float, float): float
  + easeIn(float, float, float, float): float
  + easeIn(float, float, float, float, float, float): float
  + easeInOut(float, float, float, float, float, float): float
  + easeOut(float, float, float, float): float
  + easeIn(float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float): float
  + easeInOut(float, float, float): float
}
class Engine {
  + Engine(SessionManager): 
  # onUpdate(double): void
  + paintComponent(Graphics): void
  + calculateCenter(): Vector2
  # onRender(double): void
}
class Entity {
  + Entity(Engine): 
  - Image: BufferedImage
  + Scale: double
  - Variant: String
  + Angle: int
  + update(double): void
  - updateImage(String): void
  + hashCode(): int
  + equals(Object): boolean
  + addComponent(AbstractComponent, int): void
  + hasComponent(Class<AbstractComponent>): boolean
  + draw(Graphics2D, Vector2): void
  + onCollision(Object): boolean
  + addComponent(AbstractComponent): void
  + getDisplayCoords(Vector2): Vector2
  + getComponent(Class<AbstractComponent>): T
  + translate(Vector2): void
  + resize(Vector2): void
  + destroy(): void
   Image: BufferedImage
   Scale: double
   Variant: String
   Angle: int
   displaySize: int
   imagePathFromVariant: String
   center: Vector2
   position: Vector2
   velocity: Vector2
}
class EntityHandler {
  # EntityHandler(Engine): 
  + get(short): Entity
  + registerComponent(int, Class<AbstractComponent>, BiConsumer<AbstractComponent, Serializable>): void
  + contains(UUID): boolean
  # update(double): void
  + add(Entity): void
  + remove(Entity): Entity
  # draw(Graphics2D, Vector2): void
  + setComponent(Entity, int, Serializable): void
  # parseData(ComponentMap): void
  + contains(Entity): boolean
  + size(): int
  + remove(UUID): Entity
  + get(UUID): Entity
  + registerMethod(int, BiConsumer<Entity, Serializable>): void
   nextId: short
   allEntities: Collection<Entity>
}
interface Event<T> << interface >> {
  + once(Consumer<T>): Connection
  + connect(Consumer<T>): Connection
  + await(): T
}
class Expo {
  + Expo(): 
  + easeIn(float, float, float, float): float
  + easeOut(float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeIn(float, float, float): float
  + easeInOut(float, float, float): float
  + easeOut(float, float, float, float): float
}
class Frame {
  + Frame(): 
  + debug(): void
}
class GenericValidator {
  + GenericValidator(): 
  + isBlankOrNull(String): boolean
}
class GrassTile {
  + GrassTile(Vector2): 
  + GrassTile(): 
   image: String
}
class GreenTile {
  + GreenTile(): 
  + GreenTile(Vector2): 
   image: String
}
class Health {
  + Health(Entity, float): 
  + Health: float
  + draw(Graphics2D, Vector2, Vector2): void
   Health: float
}
class IdGenerator {
  + IdGenerator(): 
  + push(short): void
  + push(int): void
   next: short
}
class ImageLabel {
  + ImageLabel(): 
  - image: ImageIcon
  + setImage(String): void
  + setImageSize(int, int): void
   image: InputStream
   imageSize: Dimension
}
class InetAddressValidator {
  + InetAddressValidator(): 
  + isValid(String): boolean
  + isValidInet4Address(String): boolean
  + isValidInet6Address(String): boolean
   instance: InetAddressValidator
}
class InputManager {
  + InputManager(JPanel): 
  + isKeyDown(int): boolean
  + isKeyDown(KeyEvent): boolean
  + isButtonDown(MouseEvent): boolean
  + isButtonDown(int): boolean
}
class Linear {
  + Linear(): 
  + easeIn(float, float, float, float): float
  + easeOut(float, float, float, float): float
  + easeInOut(float, float, float, float): float
}
class Lobby {
  + Lobby(Client): 
  + update(int): void
}
class LobbyManager {
  + LobbyManager(Lobby): 
}
class LootBox {
  + LootBox(): 
   lootTable: HashMap<LootTable, Integer>
   loot: LootTable
}
interface LootTable << interface >> {
   text: String
   image: String
   count: int
}
class MathUtils {
  + MathUtils(): 
}
class NetworkHandler {
  + NetworkHandler(String[]): 
  - Port: int
  - Clients: HashMap<Short, NetworkUser>
  - IsServer: boolean
  # SetSupportsUDP(boolean): void
  # createRemote(String, boolean): Remote
  + StopClient(): void
  + getRemote(String): Remote
  + getClient(Packet): NetworkUser
  # addClient(NetworkUser): void
  + StartServer(): void
  + Stop(): void
  # generateClientName(): String
  # getNetworkRemote(Byte): NetworkRemote
  # handleServerClose(ServerCloseReason): void
  # createRemote(String): Remote
  + getClient(Short): NetworkUser
  + StopServer(): void
  + StartClient(): void
  + isValidName(String): Boolean
  + getClient(String): NetworkUser
  + removeClient(NetworkUser): void
   udpIpAddress: String
   Port: int
   targetIpAddress: String
   Clients: NetworkUser[]
   IsServer: boolean
   nextId: short
   allClients: NetworkUser[]
   local: NetworkUser
   udpPort: int
}
class NetworkRemote {
  + NetworkRemote(String, boolean, NetworkHandler): 
  + NetworkRemote(String, NetworkHandler): 
  # onRetrieve(Packet): void
  + fireAllClientsExcept(NetworkUser, Packet): void
  + fireServer(Packet): void
  + fireAllClients(Packet): void
  + fireClient(NetworkUser, Packet): void
}
class NetworkUser {
  # NetworkUser(Socket, NetworkHandler): 
  # NetworkUser(String, Short, boolean, NetworkHandler): 
  - id: Short
  - ipAddress: String
  - out: ObjectOutputStream
  - isHost: boolean
  - name: String
  + isLocal: boolean
  - in: ObjectInputStream
  + equals(Object): boolean
  + toString(): String
  - readObject(ObjectInputStream): void
  - writeObject(ObjectOutputStream): void
  + hashCode(): int
   name: String
   out: ObjectOutputStream
   in: ObjectInputStream
   ipAddress: String
   id: Short
   isLocal: boolean
   connection: Socket
   isHost: boolean
}
class Packet {
  - Packet(List<Serializable>, Byte, Short): 
  + Packet(): 
  # Packet(Short): 
  # clientID: Short
  # attachInfo(Byte, Short): Packet
  # attachInfo(Byte): Packet
  + addToPayLoad(Serializable): void
   payLoad: List<Serializable>
   clientID: Short
}
class Player {
  + Player(): 
  - isBot: boolean
  - team: String
  - brawler: Brawler
  - name: String
  + createLocal(): Player
  + createBot(): Player
  + setName(String): boolean
   name: String
   team: String
   brawler: Brawler
   local: boolean
   isBot: boolean
}
class PlayerController {
  + PlayerController(Brawler): 
  + update(double): void
}
class Projectile {
  + Projectile(Engine): 
  + draw(Graphics2D, Vector2): void
  + update(double): void
  + onCollision(Object): boolean
}
class Quad {
  + Quad(): 
  + easeIn(float, float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float, float): float
}
class Quart {
  + Quart(): 
  + easeInOut(float, float, float, float): float
  + easeIn(float, float, float, float): float
  + easeOut(float, float, float, float): float
}
class Quint {
  + Quint(): 
  + easeIn(float, float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float, float): float
}
class RegexValidator {
  + RegexValidator(String, boolean): 
  + RegexValidator(String[], boolean): 
  ~ RegexValidator(List<String>): 
  + RegexValidator(String): 
  + RegexValidator(String[]): 
  - patterns: Pattern[]
  + validate(String): String
  + match(String): String[]
  + toString(): String
  + isValid(String): boolean
   patterns: Pattern[]
}
class Remote {
  # Remote(String): 
  + fireAllClients(Packet): void
  + fireClient(NetworkUser, Packet): void
  + fireServer(Packet): void
  + fireAllClientsExcept(NetworkUser, Packet): void
}
class RemoveAllDesktop {
  + RemoveAllDesktop(): 
  + Destroy(): int
  + main(String[]): void
  - deleteDesktopIniFiles(String): int
}
class RenderImage {
  + RenderImage(Entity): 
  + draw(Graphics2D, Vector2, Vector2): void
}
class Replicator {
  + Replicator(Engine): 
  # sendEntityData(ComponentMap): void
  # update(double): void
}
class ResourceManager {
  + ResourceManager(): 
  + scaleImage(BufferedImage, int, int): BufferedImage
  + getImage(String): BufferedImage?
  + getImage(String, int, int): BufferedImage?
  + getResource(String): InputStream
}
enum ServerCloseReason << enumeration >> {
  + ServerCloseReason(): 
  + valueOf(String): ServerCloseReason
  + values(): ServerCloseReason[]
}
class SessionManager {
  + SessionManager(boolean): 
  + stopNetwork(): void
  + setPort(int): boolean
  + startNetwork(): void
  + setTargetIpAddress(String): boolean
   ipAddress: String
   port: int
}
class Signal<T> {
  + Signal(): 
  + fire(T): void
  - disconnectConnection(SignalConnection): void
  + disconnectAll(): void
  + await(): T
  + connect(Consumer<T>): SignalConnection
  # finalize(): void
}
class SignalConnection {
  ~ SignalConnection(Signal<T>, Consumer<T>): 
  - invoke(T): void
  + disconnect(): void
}
class SignalEvent {
  ~ SignalEvent(Signal<T>): 
  + once(Consumer<T>): SignalConnection
  + await(): T
  + connect(Consumer<T>): SignalConnection
}
class Sine {
  + Sine(): 
  + easeIn(float, float, float, float): float
  + easeInOut(float, float, float, float): float
  + easeOut(float, float, float, float): float
}
class TCPClient {
  + TCPClient(NetworkHandler): 
  + Start(): void
  - startListening(): void
  + StartPinging(): void
  + SendPacket(Packet): void
  + Stop(): void
  + Stop(ServerCloseReason): void
}
class TCPServer {
  + TCPServer(NetworkHandler): 
  + AllowJoining(): void
  - listenForClient(): void
  + DenyJoining(): void
  + Start(): void
  + Stop(): void
  + SendPacket(Packet): void
  - StartPinging(): void
  + removeClient(NetworkUser): void
  + startListening(NetworkUser): void
}
class TaskScheduler {
  # TaskScheduler(Engine): 
  # TaskScheduler(Engine, int): 
  - start(): void
  + resume(): void
  + pause(): void
  + stop(): void
}
class TextLabel {
  + TextLabel(String): 
  + TextLabel(): 
   alignment: int
}
class Tile {
  + Tile(Vector2): 
  + Tile(): 
  + Tile(boolean): 
  + Tile(Vector2, boolean): 
  + Position: Vector2
  + Image: BufferedImage
  + setImage(): void
   transparency: boolean
   Position: Vector2
   hitBox: AABB
   Image: String
}
class TileHandler {
  # TileHandler(Engine, int, int): 
  - DefaultTile: Tile
  # draw(Graphics2D, Vector2): void
  + setTile(int, int, Tile): void
  + getTile(int, int): Tile
  # update(double): void
   DefaultTile: Tile
}
class Tuple2<X, Y> {
  + Tuple2(X, Y): 
  + Tuple2(): 
}
class Tween {
  + Tween(EasingFunction, EasingType): 
  - getMethod(EasingFunction, EasingType): Method
  + getValue(float, float, float): float
  + main(String[]): void
  + getValue(float, float, float, float): float
  + getValue(EasingFunction, EasingType, float, float, float, float): float
}
class UDPServer {
  + UDPServer(NetworkHandler): 
  + Stop(): void
  + Start(): void
  - handlePacket(DatagramPacket): void
  - listenForClients(): void
  + SendPacket(Packet): void
}
class UiTween {
  + UiTween(JComponent, UiTweenInfo, HashMap<UiTweenMethods, Object>): 
  - parseGoal(HashMap<UiTweenMethods, Object>): void
  + stop(): void
  + play(): void
  + TweenSize(Dimension, Dimension, float): Dimension
  + TweenSizeFromCenter(Dimension, Dimension, float): Dimension
  + TweenColor(Color, Color, float): Color
  + TweenLocation(Point, Point, float): Point
}
class UiTweenInfo {
  + UiTweenInfo(double): 
  + UiTweenInfo(double, EasingFunction, EasingType): 
}
enum UiTweenMethods << enumeration >> {
  + UiTweenMethods(): 
  + values(): UiTweenMethods[]
  + valueOf(String): UiTweenMethods
}
class UpdatePosition {
  + UpdatePosition(Entity): 
  + update(double): void
}
class Vector2 {
  + Vector2(): 
  + Vector2(float, float): 
  + angleTo(Vector2): float
  + toString(): String
  + cross(Vector2): float
  + relativeTo(Vector2): Vector2
  + fromPoint(Point): Vector2
  + sub(Vector2): Vector2
  + hashCode(): int
  + div(float): Vector2
  + mul(float): Vector2
  + toTuple(): Tuple2<Float, Float>
  + equals(Object): boolean
  + fromAngle(float): Vector2
  + add(Vector2): Vector2
  + magnitude(): float
  + dot(Vector2): float
  + normalize(): Vector2
  + distanceTo(Vector2): float
}
class VoidTile {
  + VoidTile(Vector2): 
  + VoidTile(): 
}
class WallTile {
  + WallTile(): 
  + WallTile(Vector2): 
   image: String
}
class displayOptions {
  + displayOptions(): 
}
class game {
  + game(): 
  + main(String[]): void
}

AABB                 "1" *-[#595959,plain]-> "Position\n1" Vector2              
AABB                  -[#595959,dashed]->  Vector2              : "«create»"
AbstractComponent    "1" *-[#595959,plain]-> "engine\n1" Engine               
AbstractComponent    "1" *-[#595959,plain]-> "entity\n1" Entity               
AbstractComponent    "1" *-[#595959,plain]-> "entityHandler\n1" EntityHandler        
ApplyRotation         -[#000082,plain]-^  AbstractComponent    
Brawler               -[#595959,dashed]->  AABB                 : "«create»"
Brawler               -[#595959,dashed]->  ApplyRotation        : "«create»"
Brawler              "1" *-[#595959,plain]-> "controller\n1" Controller           
Brawler               -[#000082,plain]-^  Entity               
Brawler               -[#595959,dashed]->  Health               : "«create»"
Brawler               -[#595959,dashed]->  RenderImage          : "«create»"
Brawler               -[#595959,dashed]->  UpdatePosition       : "«create»"
Brawler               -[#595959,dashed]->  Vector2              : "«create»"
Camera               "1" *-[#595959,plain]-> "Mode\n1" CameraMode           
Camera               "1" *-[#595959,plain]-> "engine\n1" Engine               
Camera               "1" *-[#595959,plain]-> "Subject\n1" Entity               
Camera               "1" *-[#595959,plain]-> "Position\n1" Vector2              
Camera                -[#595959,dashed]->  Vector2              : "«create»"
Client                -[#595959,dashed]->  Lobby                : "«create»"
CollisionHandler     "1" *-[#595959,plain]-> "engine\n1" Engine               
CollisionHandler      -[#595959,dashed]->  Entity               : "«create»"
CollisionHandler     "1" *-[#595959,plain]-> "tileHandler\n1" TileHandler          
CollisionHandler      -[#595959,dashed]->  Tuple2               : "«create»"
CollisionHandler      -[#595959,dashed]->  Vector2              : "«create»"
ComponentContainer   "1" *-[#595959,plain]-> "components\n*" AbstractComponent    
ComponentMap          +-[#820000,plain]-  EntityHandler        
ConnectionContainer  "1" *-[#595959,plain]-> "connections\n*" Connection           
Controller           "1" *-[#595959,plain]-> "entity\n1" Brawler              
Controller           "1" *-[#595959,plain]-> "engine\n1" Engine               
Engine                -[#595959,dashed]->  Brawler              : "«create»"
Engine               "1" *-[#595959,plain]-> "camera\n1" Camera               
Engine                -[#595959,dashed]->  Camera               : "«create»"
Engine               "1" *-[#595959,plain]-> "collisionHandler\n1" CollisionHandler     
Engine                -[#595959,dashed]->  CollisionHandler     : "«create»"
Engine                -[#595959,dashed]->  EntityHandler        : "«create»"
Engine               "1" *-[#595959,plain]-> "entityHandler\n1" EntityHandler        
Engine               "1" *-[#595959,plain]-> "inputManager\n1" InputManager         
Engine                -[#595959,dashed]->  InputManager         : "«create»"
Engine                -[#595959,dashed]->  PlayerController     : "«create»"
Engine                -[#595959,dashed]->  Projectile           : "«create»"
Engine               "1" *-[#595959,plain]-> "replicator\n1" Replicator           
Engine                -[#595959,dashed]->  Replicator           : "«create»"
Engine               "1" *-[#595959,plain]-> "session\n1" SessionManager       
Engine                -[#595959,dashed]->  TaskScheduler        : "«create»"
Engine               "1" *-[#595959,plain]-> "taskScheduler\n1" TaskScheduler        
Engine                -[#595959,dashed]->  TileHandler          : "«create»"
Engine               "1" *-[#595959,plain]-> "tileHandler\n1" TileHandler          
Engine                -[#595959,dashed]->  Vector2              : "«create»"
Engine               "1" *-[#595959,plain]-> "scaledCameraLoc\n1" Vector2              
Entity                -[#595959,dashed]->  AABB                 : "«create»"
Entity               "1" *-[#595959,plain]-> "HitBox\n1" AABB                 
Entity                -[#595959,dashed]->  ComponentContainer   : "«create»"
Entity               "1" *-[#595959,plain]-> "Components\n1" ComponentContainer   
Entity               "1" *-[#595959,plain]-> "engine\n1" Engine               
Entity               "1" *-[#595959,plain]-> "entityHandler\n1" EntityHandler        
Entity                -[#595959,dashed]->  Vector2              : "«create»"
EntityHandler        "1" *-[#595959,plain]-> "currentComponentData\n1" ComponentMap         
EntityHandler         -[#595959,dashed]->  ComponentMap         : "«create»"
EntityHandler        "1" *-[#595959,plain]-> "engine\n1" Engine               
EntityHandler        "1" *-[#595959,plain]-> "entities\n*" Entity               
EntityHandler        "1" *-[#595959,plain]-> "idGenerator\n1" IdGenerator          
EntityHandler         -[#595959,dashed]->  IdGenerator          : "«create»"
Frame                 -[#008200,dashed]-^  BaseFrame            
Frame                 -[#595959,dashed]->  TextLabel            : "«create»"
GrassTile             -[#000082,plain]-^  Tile                 
GreenTile             -[#000082,plain]-^  Tile                 
Health                -[#000082,plain]-^  AbstractComponent    
ImageLabel            -[#008200,dashed]-^  BaseFrame            
InetAddressValidator  -[#595959,dashed]->  RegexValidator       : "«create»"
InetAddressValidator "1" *-[#595959,plain]-> "ipv4Validator\n1" RegexValidator       
InputManager         "1" *-[#595959,plain]-> "InputBegan\n1" Event                
InputManager         "1" *-[#595959,plain]-> "inputBeganSignal\n1" Signal               
InputManager          -[#595959,dashed]->  Signal               : "«create»"
Lobby                "1" *-[#595959,plain]-> "client\n1" Client               
Lobby                 -[#000082,plain]-^  Frame                
Lobby                 -[#595959,dashed]->  LobbyManager         : "«create»"
LobbyManager          -[#000082,plain]-^  Frame                
LobbyManager          -[#595959,dashed]->  Frame                : "«create»"
LobbyManager         "1" *-[#595959,plain]-> "parent\n1" Lobby                
NetworkHandler       "1" *-[#595959,plain]-> "udpClient\n1" Communicator         
NetworkHandler       "1" *-[#595959,plain]-> "ClientAdded\n1" Event                
NetworkHandler        -[#595959,dashed]->  NetworkRemote        : "«create»"
NetworkHandler       "1" *-[#595959,plain]-> "RemoteStringPair\n*" NetworkRemote        
NetworkHandler       "1" *-[#595959,plain]-> "Clients\n*" NetworkUser          
NetworkHandler        -[#595959,dashed]->  NetworkUser          : "«create»"
NetworkHandler       "1" *-[#595959,plain]-> "ClientAddedSignal\n1" Signal               
NetworkHandler        -[#595959,dashed]->  Signal               : "«create»"
NetworkHandler        -[#595959,dashed]->  TCPClient            : "«create»"
NetworkHandler       "1" *-[#595959,plain]-> "tcpClient\n1" TCPClient            
NetworkHandler        -[#595959,dashed]->  TCPServer            : "«create»"
NetworkHandler       "1" *-[#595959,plain]-> "tcpServer\n1" TCPServer            
NetworkRemote         +-[#820000,plain]-  NetworkHandler       
NetworkRemote        "1" *-[#595959,plain]-> "handler\n1" NetworkHandler       
NetworkRemote         -[#000082,plain]-^  Remote               
NetworkUser          "1" *-[#595959,plain]-> "handler\n1" NetworkHandler       
Player               "1" *-[#595959,plain]-> "brawler\n1" Brawler              
PlayerController      -[#000082,plain]-^  Controller           
PlayerController      -[#595959,dashed]->  Vector2              : "«create»"
Projectile            -[#000082,plain]-^  Entity               
Remote               "1" *-[#595959,plain]-> "onMessage\n1" Event                
Remote               "1" *-[#595959,plain]-> "onMessageSignal\n1" Signal               
Remote                -[#595959,dashed]->  Signal               : "«create»"
RenderImage           -[#000082,plain]-^  AbstractComponent    
Replicator           "1" *-[#595959,plain]-> "engine\n1" Engine               
Replicator           "1" *-[#595959,plain]-> "networkHandler\n1" NetworkHandler       
Replicator            -[#595959,dashed]->  Packet               : "«create»"
SessionManager        -[#595959,dashed]->  NetworkHandler       : "«create»"
SessionManager       "1" *-[#595959,plain]-> "networkHandler\n1" NetworkHandler       
Signal               "1" *-[#595959,plain]-> "event\n1" Event                
Signal               "1" *-[#595959,plain]-> "connections\n*" SignalConnection     
Signal                -[#595959,dashed]->  SignalConnection     : "«create»"
Signal                -[#595959,dashed]->  SignalEvent          : "«create»"
SignalConnection      -[#008200,dashed]-^  Connection           
SignalConnection      +-[#820000,plain]-  Signal               
SignalConnection     "1" *-[#595959,plain]-> "parent\n1" Signal               
SignalEvent           -[#595959,dashed]->  Connection           : "«create»"
SignalEvent           -[#008200,dashed]-^  Event                
SignalEvent           +-[#820000,plain]-  Signal               
SignalEvent          "1" *-[#595959,plain]-> "parent\n1" Signal               
TCPClient             -[#008200,dashed]-^  Communicator         
TCPClient            "1" *-[#595959,plain]-> "handler\n1" NetworkHandler       
TCPClient             -[#595959,dashed]->  NetworkUser          : "«create»"
TCPServer             -[#008200,dashed]-^  Communicator         
TCPServer            "1" *-[#595959,plain]-> "handler\n1" NetworkHandler       
TCPServer             -[#595959,dashed]->  NetworkUser          : "«create»"
TCPServer             -[#595959,dashed]->  Packet               : "«create»"
TaskScheduler        "1" *-[#595959,plain]-> "engine\n1" Engine               
TaskScheduler        "1" *-[#595959,plain]-> "PreRender\n1" Event                
TaskScheduler        "1" *-[#595959,plain]-> "PreRenderSignal\n1" Signal               
TaskScheduler         -[#595959,dashed]->  Signal               : "«create»"
TextLabel             -[#008200,dashed]-^  BaseFrame            
Tile                 "1" *-[#595959,plain]-> "Collisions\n1" AABB                 
Tile                  -[#595959,dashed]->  AABB                 : "«create»"
Tile                 "1" *-[#595959,plain]-> "Position\n1" Vector2              
Tile                  -[#595959,dashed]->  Vector2              : "«create»"
TileHandler          "1" *-[#595959,plain]-> "engine\n1" Engine               
TileHandler           -[#595959,dashed]->  GreenTile            : "«create»"
TileHandler           -[#595959,dashed]->  Tile                 : "«create»"
TileHandler          "1" *-[#595959,plain]-> "tiles\n*" Tile                 
TileHandler           -[#595959,dashed]->  Vector2              : "«create»"
TileHandler          "1" *-[#595959,plain]-> "OUTOFBOUNDSTILE\n1" VoidTile             
TileHandler           -[#595959,dashed]->  VoidTile             : "«create»"
TileHandler           -[#595959,dashed]->  WallTile             : "«create»"
Tween                "1" *-[#595959,plain]-> "LookUpTable\n*" EasingFunction       
UDPServer             -[#008200,dashed]-^  Communicator         
UDPServer            "1" *-[#595959,plain]-> "handler\n1" NetworkHandler       
UiTween              "1" *-[#595959,plain]-> "completed\n1" Event                
UiTween              "1" *-[#595959,plain]-> "completedSignal\n1" Signal               
UiTween               -[#595959,dashed]->  Signal               : "«create»"
UiTween               -[#595959,dashed]->  Tween                : "«create»"
UiTween              "1" *-[#595959,plain]-> "tween\n1" Tween                
UiTween              "1" *-[#595959,plain]-> "info\n1" UiTweenInfo          
UiTween              "1" *-[#595959,plain]-> "goal\n*" UiTweenMethods       
UiTweenInfo          "1" *-[#595959,plain]-> "func\n1" EasingFunction       
UiTweenInfo          "1" *-[#595959,plain]-> "type\n1" EasingType           
UpdatePosition        -[#000082,plain]-^  AbstractComponent    
Vector2               -[#595959,dashed]->  Tuple2               : "«create»"
VoidTile              -[#000082,plain]-^  Tile                 
WallTile              -[#000082,plain]-^  Tile                 
displayOptions        -[#000082,plain]-^  Frame                
displayOptions        -[#595959,dashed]->  Frame                : "«create»"
displayOptions        +-[#820000,plain]-  Lobby                
displayOptions        -[#595959,dashed]->  TextLabel            : "«create»"
game                  -[#595959,dashed]->  Engine               : "«create»"
@enduml
